{"ast":null,"code":"import { hashQueryKeyByOptions, matchQuery, parseFilterArgs } from \"./utils.mjs\";\nimport { Query } from \"./query.mjs\";\nimport { notifyManager } from \"./notifyManager.mjs\";\nimport { Subscribable } from \"./subscribable.mjs\";\n// CLASS\nexport class QueryCache extends Subscribable {\n  constructor(config) {\n    super();\n    this.config = config || {};\n    this.queries = [];\n    this.queriesMap = {};\n  }\n  build(client, options, state) {\n    var _options$queryHash;\n    const queryKey = options.queryKey;\n    const queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);\n    let query = this.get(queryHash);\n    if (!query) {\n      query = new Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n        meta: options.meta\n      });\n      this.add(query);\n    }\n    return query;\n  }\n  add(query) {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query;\n      this.queries.push(query);\n      this.notify({\n        type: 'added',\n        query\n      });\n    }\n  }\n  remove(query) {\n    const queryInMap = this.queriesMap[query.queryHash];\n    if (queryInMap) {\n      query.destroy();\n      this.queries = this.queries.filter(x => x !== query);\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash];\n      }\n      this.notify({\n        type: 'removed',\n        query\n      });\n    }\n  }\n  clear() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query);\n      });\n    });\n  }\n  get(queryHash) {\n    return this.queriesMap[queryHash];\n  }\n  getAll() {\n    return this.queries;\n  }\n  find(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true;\n    }\n    return this.queries.find(query => matchQuery(filters, query));\n  }\n  findAll(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    return Object.keys(filters).length > 0 ? this.queries.filter(query => matchQuery(filters, query)) : this.queries;\n  }\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n  onFocus() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus();\n      });\n    });\n  }\n  onOnline() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline();\n      });\n    });\n  }\n}","map":{"version":3,"names":["hashQueryKeyByOptions","matchQuery","parseFilterArgs","Query","notifyManager","Subscribable","QueryCache","constructor","config","queries","queriesMap","build","client","options","state","_options$queryHash","queryKey","queryHash","query","get","cache","logger","getLogger","defaultQueryOptions","defaultOptions","getQueryDefaults","meta","add","push","notify","type","remove","queryInMap","destroy","filter","x","clear","batch","forEach","getAll","find","arg1","arg2","filters","exact","findAll","Object","keys","length","event","listeners","listener","onFocus","onOnline"],"sources":["C:/Users/chich/Project/client/node_modules/react-query/lib/core/queryCache.mjs"],"sourcesContent":["import { hashQueryKeyByOptions, matchQuery, parseFilterArgs } from \"./utils.mjs\";\nimport { Query } from \"./query.mjs\";\nimport { notifyManager } from \"./notifyManager.mjs\";\nimport { Subscribable } from \"./subscribable.mjs\";\n// CLASS\nexport class QueryCache extends Subscribable {\n  constructor(config) {\n    super();\n    this.config = config || {};\n    this.queries = [];\n    this.queriesMap = {};\n  }\n\n  build(client, options, state) {\n    var _options$queryHash;\n\n    const queryKey = options.queryKey;\n    const queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);\n    let query = this.get(queryHash);\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n        meta: options.meta\n      });\n      this.add(query);\n    }\n\n    return query;\n  }\n\n  add(query) {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query;\n      this.queries.push(query);\n      this.notify({\n        type: 'added',\n        query\n      });\n    }\n  }\n\n  remove(query) {\n    const queryInMap = this.queriesMap[query.queryHash];\n\n    if (queryInMap) {\n      query.destroy();\n      this.queries = this.queries.filter(x => x !== query);\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash];\n      }\n\n      this.notify({\n        type: 'removed',\n        query\n      });\n    }\n  }\n\n  clear() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query);\n      });\n    });\n  }\n\n  get(queryHash) {\n    return this.queriesMap[queryHash];\n  }\n\n  getAll() {\n    return this.queries;\n  }\n\n  find(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true;\n    }\n\n    return this.queries.find(query => matchQuery(filters, query));\n  }\n\n  findAll(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    return Object.keys(filters).length > 0 ? this.queries.filter(query => matchQuery(filters, query)) : this.queries;\n  }\n\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n\n  onFocus() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus();\n      });\n    });\n  }\n\n  onOnline() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline();\n      });\n    });\n  }\n\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}