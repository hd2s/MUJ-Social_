{"ast":null,"code":"import { isServer, isValidTimeout, noop, replaceData, shallowEqualObjects, timeUntilStale } from \"./utils.mjs\";\nimport { notifyManager } from \"./notifyManager.mjs\";\nimport { focusManager } from \"./focusManager.mjs\";\nimport { Subscribable } from \"./subscribable.mjs\";\nimport { canFetch, isCancelledError } from \"./retryer.mjs\";\nexport class QueryObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.options = options;\n    this.trackedProps = new Set();\n    this.selectError = null;\n    this.bindMethods();\n    this.setOptions(options);\n  }\n  bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  }\n  onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this);\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch();\n      }\n      this.updateTimers();\n    }\n  }\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  }\n  shouldFetchOnReconnect() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);\n  }\n  shouldFetchOnWindowFocus() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);\n  }\n  destroy() {\n    this.listeners = [];\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n    this.currentQuery.removeObserver(this);\n  }\n  setOptions(options, notifyOptions) {\n    const prevOptions = this.options;\n    const prevQuery = this.currentQuery;\n    this.options = this.client.defaultQueryOptions(options);\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n    this.updateQuery();\n    const mounted = this.hasListeners(); // Fetch if there are subscribers\n\n    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n      this.executeFetch();\n    } // Update result\n\n    this.updateResult(notifyOptions); // Update stale interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.updateStaleTimeout();\n    }\n    const nextRefetchInterval = this.computeRefetchInterval(); // Update refetch interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {\n      this.updateRefetchInterval(nextRefetchInterval);\n    }\n  }\n  getOptimisticResult(options) {\n    const query = this.client.getQueryCache().build(this.client, options);\n    return this.createResult(query, options);\n  }\n  getCurrentResult() {\n    return this.currentResult;\n  }\n  trackResult(result) {\n    const trackedResult = {};\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key);\n          return result[key];\n        }\n      });\n    });\n    return trackedResult;\n  }\n  getCurrentQuery() {\n    return this.currentQuery;\n  }\n  remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  }\n  refetch({\n    refetchPage,\n    ...options\n  } = {}) {\n    return this.fetch({\n      ...options,\n      meta: {\n        refetchPage\n      }\n    });\n  }\n  fetchOptimistic(options) {\n    const defaultedOptions = this.client.defaultQueryOptions(options);\n    const query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    query.isFetchingOptimistic = true;\n    return query.fetch().then(() => this.createResult(query, defaultedOptions));\n  }\n  fetch(fetchOptions) {\n    var _fetchOptions$cancelR;\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true\n    }).then(() => {\n      this.updateResult();\n      return this.currentResult;\n    });\n  }\n  executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    let promise = this.currentQuery.fetch(this.options, fetchOptions);\n    if (!(fetchOptions != null && fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n    return promise;\n  }\n  updateStaleTimeout() {\n    this.clearStaleTimeout();\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n    const time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    const timeout = time + 1;\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult();\n      }\n    }, timeout);\n  }\n  computeRefetchInterval() {\n    var _this$options$refetch;\n    return typeof this.options.refetchInterval === 'function' ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;\n  }\n  updateRefetchInterval(nextInterval) {\n    this.clearRefetchInterval();\n    this.currentRefetchInterval = nextInterval;\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {\n      return;\n    }\n    this.refetchIntervalId = setInterval(() => {\n      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        this.executeFetch();\n      }\n    }, this.currentRefetchInterval);\n  }\n  updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval(this.computeRefetchInterval());\n  }\n  clearStaleTimeout() {\n    clearTimeout(this.staleTimeoutId);\n    this.staleTimeoutId = undefined;\n  }\n  clearRefetchInterval() {\n    clearInterval(this.refetchIntervalId);\n    this.refetchIntervalId = undefined;\n  }\n  createResult(query, options) {\n    const prevQuery = this.currentQuery;\n    const prevOptions = this.options;\n    const prevResult = this.currentResult;\n    const prevResultState = this.currentResultState;\n    const prevResultOptions = this.currentResultOptions;\n    const queryChange = query !== prevQuery;\n    const queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n    const prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n    const {\n      state\n    } = query;\n    let {\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      fetchStatus,\n      status\n    } = state;\n    let isPreviousData = false;\n    let isPlaceholderData = false;\n    let data; // Optimistically set result in fetching state if needed\n\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners();\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode) ? 'fetching' : 'paused';\n        if (!dataUpdatedAt) {\n          status = 'loading';\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle';\n      }\n    } // Keep previous data if needed\n\n    if (options.keepPreviousData && !state.dataUpdateCount && prevQueryResult != null && prevQueryResult.isSuccess && status !== 'error') {\n      data = prevQueryResult.data;\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n      status = prevQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {\n        data = this.selectResult;\n      } else {\n        try {\n          this.selectFn = options.select;\n          data = options.select(state.data);\n          data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options);\n          this.selectResult = data;\n          this.selectError = null;\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError);\n          }\n          this.selectError = selectError;\n        }\n      }\n    } // Use query data\n    else {\n      data = state.data;\n    } // Show placeholder data if needed\n\n    if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n      let placeholderData; // Memoize placeholder data\n\n      if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData);\n            placeholderData = replaceData(prevResult == null ? void 0 : prevResult.data, placeholderData, options);\n            this.selectError = null;\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError);\n            }\n            this.selectError = selectError;\n          }\n        }\n      }\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = placeholderData;\n        isPlaceholderData = true;\n      }\n    }\n    if (this.selectError) {\n      error = this.selectError;\n      data = this.selectResult;\n      errorUpdatedAt = Date.now();\n      status = 'error';\n    }\n    const isFetching = fetchStatus === 'fetching';\n    const result = {\n      status,\n      fetchStatus,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching: isFetching,\n      isRefetching: isFetching && status !== 'loading',\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove\n    };\n    return result;\n  }\n  updateResult(notifyOptions) {\n    const prevResult = this.currentResult;\n    const nextResult = this.createResult(this.currentQuery, this.options);\n    this.currentResultState = this.currentQuery.state;\n    this.currentResultOptions = this.options; // Only notify and update result if something has changed\n\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return;\n    }\n    this.currentResult = nextResult; // Determine which callbacks to trigger\n\n    const defaultNotifyOptions = {\n      cache: true\n    };\n    const shouldNotifyListeners = () => {\n      if (!prevResult) {\n        return true;\n      }\n      const {\n        notifyOnChangeProps\n      } = this.options;\n      if (notifyOnChangeProps === 'all' || !notifyOnChangeProps && !this.trackedProps.size) {\n        return true;\n      }\n      const includedProps = new Set(notifyOnChangeProps != null ? notifyOnChangeProps : this.trackedProps);\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error');\n      }\n      return Object.keys(this.currentResult).some(key => {\n        const typedKey = key;\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey];\n        return changed && includedProps.has(typedKey);\n      });\n    };\n    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true;\n    }\n    this.notify({\n      ...defaultNotifyOptions,\n      ...notifyOptions\n    });\n  }\n  updateQuery() {\n    const query = this.client.getQueryCache().build(this.client, this.options);\n    if (query === this.currentQuery) {\n      return;\n    }\n    const prevQuery = this.currentQuery;\n    this.currentQuery = query;\n    this.currentQueryInitialState = query.state;\n    this.previousQueryResult = this.currentResult;\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      query.addObserver(this);\n    }\n  }\n  onQueryUpdate(action) {\n    const notifyOptions = {};\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual;\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true;\n    }\n    this.updateResult(notifyOptions);\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  }\n  notify(notifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;\n        (_this$options$onSucce = (_this$options = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, this.currentResult.data);\n        (_this$options$onSettl = (_this$options2 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, this.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;\n        (_this$options$onError = (_this$options3 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, this.currentResult.error);\n        (_this$options$onSettl2 = (_this$options4 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, undefined, this.currentResult.error);\n      } // Then trigger the listeners\n\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult);\n        });\n      } // Then the cache listeners\n\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated'\n        });\n      }\n    });\n  }\n}\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\nfunction shouldFetchOn(query, options, field) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field;\n    return value === 'always' || value !== false && isStale(query, options);\n  }\n  return false;\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== 'error') && isStale(query, options);\n}\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}","map":{"version":3,"names":["isServer","isValidTimeout","noop","replaceData","shallowEqualObjects","timeUntilStale","notifyManager","focusManager","Subscribable","canFetch","isCancelledError","QueryObserver","constructor","client","options","trackedProps","Set","selectError","bindMethods","setOptions","remove","bind","refetch","onSubscribe","listeners","length","currentQuery","addObserver","shouldFetchOnMount","executeFetch","updateTimers","onUnsubscribe","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryOptions","enabled","Error","queryKey","updateQuery","mounted","hasListeners","shouldFetchOptionally","updateResult","staleTime","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","query","getQueryCache","build","createResult","getCurrentResult","currentResult","trackResult","result","trackedResult","Object","keys","forEach","key","defineProperty","configurable","enumerable","get","add","getCurrentQuery","refetchPage","fetch","meta","fetchOptimistic","defaultedOptions","isFetchingOptimistic","then","fetchOptions","_fetchOptions$cancelR","cancelRefetch","promise","throwOnError","catch","isStale","time","dataUpdatedAt","timeout","staleTimeoutId","setTimeout","_this$options$refetch","refetchInterval","data","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","isFocused","clearTimeout","undefined","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","state","currentQueryInitialState","prevQueryResult","previousQueryResult","error","errorUpdatedAt","fetchStatus","status","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","networkMode","keepPreviousData","dataUpdateCount","isSuccess","select","selectFn","selectResult","process","env","NODE_ENV","getLogger","placeholderData","Date","now","isFetching","isLoading","isError","failureCount","fetchFailureCount","errorUpdateCount","isFetched","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","nextResult","defaultNotifyOptions","cache","shouldNotifyListeners","notifyOnChangeProps","size","includedProps","useErrorBoundary","some","typedKey","changed","has","notify","onQueryUpdate","action","type","onSuccess","manual","onError","batch","_this$options$onSucce","_this$options","_this$options$onSettl","_this$options2","call","onSettled","_this$options$onError","_this$options3","_this$options$onSettl2","_this$options4","listener","shouldLoadOnMount","retryOnMount","refetchOnMount","field","value","suspense","isStaleByTime"],"sources":["C:/Users/chich/Project/client/node_modules/react-query/lib/core/queryObserver.mjs"],"sourcesContent":["import { isServer, isValidTimeout, noop, replaceData, shallowEqualObjects, timeUntilStale } from \"./utils.mjs\";\nimport { notifyManager } from \"./notifyManager.mjs\";\nimport { focusManager } from \"./focusManager.mjs\";\nimport { Subscribable } from \"./subscribable.mjs\";\nimport { canFetch, isCancelledError } from \"./retryer.mjs\";\nexport class QueryObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.options = options;\n    this.trackedProps = new Set();\n    this.selectError = null;\n    this.bindMethods();\n    this.setOptions(options);\n  }\n\n  bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  }\n\n  onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this);\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch();\n      }\n\n      this.updateTimers();\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  }\n\n  shouldFetchOnReconnect() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);\n  }\n\n  shouldFetchOnWindowFocus() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);\n  }\n\n  destroy() {\n    this.listeners = [];\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n    this.currentQuery.removeObserver(this);\n  }\n\n  setOptions(options, notifyOptions) {\n    const prevOptions = this.options;\n    const prevQuery = this.currentQuery;\n    this.options = this.client.defaultQueryOptions(options);\n\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n\n    this.updateQuery();\n    const mounted = this.hasListeners(); // Fetch if there are subscribers\n\n    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n      this.executeFetch();\n    } // Update result\n\n\n    this.updateResult(notifyOptions); // Update stale interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.updateStaleTimeout();\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval(); // Update refetch interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {\n      this.updateRefetchInterval(nextRefetchInterval);\n    }\n  }\n\n  getOptimisticResult(options) {\n    const query = this.client.getQueryCache().build(this.client, options);\n    return this.createResult(query, options);\n  }\n\n  getCurrentResult() {\n    return this.currentResult;\n  }\n\n  trackResult(result) {\n    const trackedResult = {};\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key);\n          return result[key];\n        }\n      });\n    });\n    return trackedResult;\n  }\n\n  getCurrentQuery() {\n    return this.currentQuery;\n  }\n\n  remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  }\n\n  refetch({\n    refetchPage,\n    ...options\n  } = {}) {\n    return this.fetch({ ...options,\n      meta: {\n        refetchPage\n      }\n    });\n  }\n\n  fetchOptimistic(options) {\n    const defaultedOptions = this.client.defaultQueryOptions(options);\n    const query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    query.isFetchingOptimistic = true;\n    return query.fetch().then(() => this.createResult(query, defaultedOptions));\n  }\n\n  fetch(fetchOptions) {\n    var _fetchOptions$cancelR;\n\n    return this.executeFetch({ ...fetchOptions,\n      cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true\n    }).then(() => {\n      this.updateResult();\n      return this.currentResult;\n    });\n  }\n\n  executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    let promise = this.currentQuery.fetch(this.options, fetchOptions);\n\n    if (!(fetchOptions != null && fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  }\n\n  updateStaleTimeout() {\n    this.clearStaleTimeout();\n\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n\n    const time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    const timeout = time + 1;\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult();\n      }\n    }, timeout);\n  }\n\n  computeRefetchInterval() {\n    var _this$options$refetch;\n\n    return typeof this.options.refetchInterval === 'function' ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;\n  }\n\n  updateRefetchInterval(nextInterval) {\n    this.clearRefetchInterval();\n    this.currentRefetchInterval = nextInterval;\n\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {\n      return;\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        this.executeFetch();\n      }\n    }, this.currentRefetchInterval);\n  }\n\n  updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval(this.computeRefetchInterval());\n  }\n\n  clearStaleTimeout() {\n    clearTimeout(this.staleTimeoutId);\n    this.staleTimeoutId = undefined;\n  }\n\n  clearRefetchInterval() {\n    clearInterval(this.refetchIntervalId);\n    this.refetchIntervalId = undefined;\n  }\n\n  createResult(query, options) {\n    const prevQuery = this.currentQuery;\n    const prevOptions = this.options;\n    const prevResult = this.currentResult;\n    const prevResultState = this.currentResultState;\n    const prevResultOptions = this.currentResultOptions;\n    const queryChange = query !== prevQuery;\n    const queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n    const prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n    const {\n      state\n    } = query;\n    let {\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      fetchStatus,\n      status\n    } = state;\n    let isPreviousData = false;\n    let isPlaceholderData = false;\n    let data; // Optimistically set result in fetching state if needed\n\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners();\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode) ? 'fetching' : 'paused';\n\n        if (!dataUpdatedAt) {\n          status = 'loading';\n        }\n      }\n\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle';\n      }\n    } // Keep previous data if needed\n\n\n    if (options.keepPreviousData && !state.dataUpdateCount && prevQueryResult != null && prevQueryResult.isSuccess && status !== 'error') {\n      data = prevQueryResult.data;\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n      status = prevQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {\n        data = this.selectResult;\n      } else {\n        try {\n          this.selectFn = options.select;\n          data = options.select(state.data);\n          data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options);\n          this.selectResult = data;\n          this.selectError = null;\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError);\n          }\n\n          this.selectError = selectError;\n        }\n      }\n    } // Use query data\n    else {\n      data = state.data;\n    } // Show placeholder data if needed\n\n\n    if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n      let placeholderData; // Memoize placeholder data\n\n      if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData);\n            placeholderData = replaceData(prevResult == null ? void 0 : prevResult.data, placeholderData, options);\n            this.selectError = null;\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError);\n            }\n\n            this.selectError = selectError;\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = placeholderData;\n        isPlaceholderData = true;\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError;\n      data = this.selectResult;\n      errorUpdatedAt = Date.now();\n      status = 'error';\n    }\n\n    const isFetching = fetchStatus === 'fetching';\n    const result = {\n      status,\n      fetchStatus,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching: isFetching,\n      isRefetching: isFetching && status !== 'loading',\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove\n    };\n    return result;\n  }\n\n  updateResult(notifyOptions) {\n    const prevResult = this.currentResult;\n    const nextResult = this.createResult(this.currentQuery, this.options);\n    this.currentResultState = this.currentQuery.state;\n    this.currentResultOptions = this.options; // Only notify and update result if something has changed\n\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return;\n    }\n\n    this.currentResult = nextResult; // Determine which callbacks to trigger\n\n    const defaultNotifyOptions = {\n      cache: true\n    };\n\n    const shouldNotifyListeners = () => {\n      if (!prevResult) {\n        return true;\n      }\n\n      const {\n        notifyOnChangeProps\n      } = this.options;\n\n      if (notifyOnChangeProps === 'all' || !notifyOnChangeProps && !this.trackedProps.size) {\n        return true;\n      }\n\n      const includedProps = new Set(notifyOnChangeProps != null ? notifyOnChangeProps : this.trackedProps);\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error');\n      }\n\n      return Object.keys(this.currentResult).some(key => {\n        const typedKey = key;\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey];\n        return changed && includedProps.has(typedKey);\n      });\n    };\n\n    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true;\n    }\n\n    this.notify({ ...defaultNotifyOptions,\n      ...notifyOptions\n    });\n  }\n\n  updateQuery() {\n    const query = this.client.getQueryCache().build(this.client, this.options);\n\n    if (query === this.currentQuery) {\n      return;\n    }\n\n    const prevQuery = this.currentQuery;\n    this.currentQuery = query;\n    this.currentQueryInitialState = query.state;\n    this.previousQueryResult = this.currentResult;\n\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      query.addObserver(this);\n    }\n  }\n\n  onQueryUpdate(action) {\n    const notifyOptions = {};\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual;\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true;\n    }\n\n    this.updateResult(notifyOptions);\n\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  }\n\n  notify(notifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;\n\n        (_this$options$onSucce = (_this$options = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, this.currentResult.data);\n        (_this$options$onSettl = (_this$options2 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, this.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;\n\n        (_this$options$onError = (_this$options3 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, this.currentResult.error);\n        (_this$options$onSettl2 = (_this$options4 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, undefined, this.currentResult.error);\n      } // Then trigger the listeners\n\n\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult);\n        });\n      } // Then the cache listeners\n\n\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated'\n        });\n      }\n    });\n  }\n\n}\n\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\n\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\n\nfunction shouldFetchOn(query, options, field) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field;\n    return value === 'always' || value !== false && isStale(query, options);\n  }\n\n  return false;\n}\n\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== 'error') && isStale(query, options);\n}\n\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}