{"ast":null,"code":"import React from 'react';\nexport const defaultContext = /*#__PURE__*/React.createContext(undefined);\nconst QueryClientSharingContext = /*#__PURE__*/React.createContext(false); // If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\n\nfunction getQueryClientContext(context, contextSharing) {\n  if (context) {\n    return context;\n  }\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext;\n    }\n    return window.ReactQueryClientContext;\n  }\n  return defaultContext;\n}\nexport const useQueryClient = ({\n  context\n} = {}) => {\n  const queryClient = React.useContext(getQueryClientContext(context, React.useContext(QueryClientSharingContext)));\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one');\n  }\n  return queryClient;\n};\nexport const QueryClientProvider = ({\n  client,\n  children,\n  context,\n  contextSharing = false\n}) => {\n  React.useEffect(() => {\n    client.mount();\n    return () => {\n      client.unmount();\n    };\n  }, [client]);\n  const Context = getQueryClientContext(context, contextSharing);\n  return /*#__PURE__*/React.createElement(QueryClientSharingContext.Provider, {\n    value: !context && contextSharing\n  }, /*#__PURE__*/React.createElement(Context.Provider, {\n    value: client\n  }, children));\n};","map":{"version":3,"names":["React","defaultContext","createContext","undefined","QueryClientSharingContext","getQueryClientContext","context","contextSharing","window","ReactQueryClientContext","useQueryClient","queryClient","useContext","Error","QueryClientProvider","client","children","useEffect","mount","unmount","Context","createElement","Provider","value"],"sources":["C:/Users/chich/Project/client/node_modules/react-query/lib/reactjs/QueryClientProvider.mjs"],"sourcesContent":["import React from 'react';\nexport const defaultContext = /*#__PURE__*/React.createContext(undefined);\nconst QueryClientSharingContext = /*#__PURE__*/React.createContext(false); // If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\n\nfunction getQueryClientContext(context, contextSharing) {\n  if (context) {\n    return context;\n  }\n\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext;\n    }\n\n    return window.ReactQueryClientContext;\n  }\n\n  return defaultContext;\n}\n\nexport const useQueryClient = ({\n  context\n} = {}) => {\n  const queryClient = React.useContext(getQueryClientContext(context, React.useContext(QueryClientSharingContext)));\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one');\n  }\n\n  return queryClient;\n};\nexport const QueryClientProvider = ({\n  client,\n  children,\n  context,\n  contextSharing = false\n}) => {\n  React.useEffect(() => {\n    client.mount();\n    return () => {\n      client.unmount();\n    };\n  }, [client]);\n  const Context = getQueryClientContext(context, contextSharing);\n  return /*#__PURE__*/React.createElement(QueryClientSharingContext.Provider, {\n    value: !context && contextSharing\n  }, /*#__PURE__*/React.createElement(Context.Provider, {\n    value: client\n  }, children));\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,MAAMC,cAAc,GAAG,aAAaD,KAAK,CAACE,aAAa,CAACC,SAAS,CAAC;AACzE,MAAMC,yBAAyB,GAAG,aAAaJ,KAAK,CAACE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;AAC3E;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASG,qBAAqBA,CAACC,OAAO,EAAEC,cAAc,EAAE;EACtD,IAAID,OAAO,EAAE;IACX,OAAOA,OAAO;EAChB;EAEA,IAAIC,cAAc,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IACnD,IAAI,CAACA,MAAM,CAACC,uBAAuB,EAAE;MACnCD,MAAM,CAACC,uBAAuB,GAAGR,cAAc;IACjD;IAEA,OAAOO,MAAM,CAACC,uBAAuB;EACvC;EAEA,OAAOR,cAAc;AACvB;AAEA,OAAO,MAAMS,cAAc,GAAGA,CAAC;EAC7BJ;AACF,CAAC,GAAG,CAAC,CAAC,KAAK;EACT,MAAMK,WAAW,GAAGX,KAAK,CAACY,UAAU,CAACP,qBAAqB,CAACC,OAAO,EAAEN,KAAK,CAACY,UAAU,CAACR,yBAAyB,CAAC,CAAC,CAAC;EAEjH,IAAI,CAACO,WAAW,EAAE;IAChB,MAAM,IAAIE,KAAK,CAAC,wDAAwD,CAAC;EAC3E;EAEA,OAAOF,WAAW;AACpB,CAAC;AACD,OAAO,MAAMG,mBAAmB,GAAGA,CAAC;EAClCC,MAAM;EACNC,QAAQ;EACRV,OAAO;EACPC,cAAc,GAAG;AACnB,CAAC,KAAK;EACJP,KAAK,CAACiB,SAAS,CAAC,MAAM;IACpBF,MAAM,CAACG,KAAK,CAAC,CAAC;IACd,OAAO,MAAM;MACXH,MAAM,CAACI,OAAO,CAAC,CAAC;IAClB,CAAC;EACH,CAAC,EAAE,CAACJ,MAAM,CAAC,CAAC;EACZ,MAAMK,OAAO,GAAGf,qBAAqB,CAACC,OAAO,EAAEC,cAAc,CAAC;EAC9D,OAAO,aAAaP,KAAK,CAACqB,aAAa,CAACjB,yBAAyB,CAACkB,QAAQ,EAAE;IAC1EC,KAAK,EAAE,CAACjB,OAAO,IAAIC;EACrB,CAAC,EAAE,aAAaP,KAAK,CAACqB,aAAa,CAACD,OAAO,CAACE,QAAQ,EAAE;IACpDC,KAAK,EAAER;EACT,CAAC,EAAEC,QAAQ,CAAC,CAAC;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}