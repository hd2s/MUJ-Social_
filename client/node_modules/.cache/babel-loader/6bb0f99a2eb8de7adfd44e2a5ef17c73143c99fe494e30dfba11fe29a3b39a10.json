{"ast":null,"code":"// TYPES\n// FUNCTIONS\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state\n  };\n} // Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\n\nfunction dehydrateQuery(query) {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash\n  };\n}\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === 'success';\n}\nexport function dehydrate(client, options = {}) {\n  const mutations = [];\n  const queries = [];\n  if (options.dehydrateMutations !== false) {\n    const shouldDehydrateMutation = options.shouldDehydrateMutation || defaultShouldDehydrateMutation;\n    client.getMutationCache().getAll().forEach(mutation => {\n      if (shouldDehydrateMutation(mutation)) {\n        mutations.push(dehydrateMutation(mutation));\n      }\n    });\n  }\n  if (options.dehydrateQueries !== false) {\n    const shouldDehydrateQuery = options.shouldDehydrateQuery || defaultShouldDehydrateQuery;\n    client.getQueryCache().getAll().forEach(query => {\n      if (shouldDehydrateQuery(query)) {\n        queries.push(dehydrateQuery(query));\n      }\n    });\n  }\n  return {\n    mutations,\n    queries\n  };\n}\nexport function hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return;\n  }\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache(); // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const mutations = dehydratedState.mutations || []; // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(dehydratedMutation => {\n    var _options$defaultOptio;\n    mutationCache.build(client, {\n      ...(options == null ? void 0 : (_options$defaultOptio = options.defaultOptions) == null ? void 0 : _options$defaultOptio.mutations),\n      mutationKey: dehydratedMutation.mutationKey\n    }, dehydratedMutation.state);\n  });\n  queries.forEach(dehydratedQuery => {\n    var _options$defaultOptio2;\n    const query = queryCache.get(dehydratedQuery.queryHash); // Do not hydrate if an existing query exists with newer data\n\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state);\n      }\n      return;\n    } // Restore query\n\n    queryCache.build(client, {\n      ...(options == null ? void 0 : (_options$defaultOptio2 = options.defaultOptions) == null ? void 0 : _options$defaultOptio2.queries),\n      queryKey: dehydratedQuery.queryKey,\n      queryHash: dehydratedQuery.queryHash\n    }, dehydratedQuery.state);\n  });\n}","map":{"version":3,"names":["dehydrateMutation","mutation","mutationKey","options","state","dehydrateQuery","query","queryKey","queryHash","defaultShouldDehydrateMutation","isPaused","defaultShouldDehydrateQuery","status","dehydrate","client","mutations","queries","dehydrateMutations","shouldDehydrateMutation","getMutationCache","getAll","forEach","push","dehydrateQueries","shouldDehydrateQuery","getQueryCache","hydrate","dehydratedState","mutationCache","queryCache","dehydratedMutation","_options$defaultOptio","build","defaultOptions","dehydratedQuery","_options$defaultOptio2","get","dataUpdatedAt","setState"],"sources":["C:/Users/chich/Project/client/node_modules/react-query/lib/core/hydration.mjs"],"sourcesContent":["// TYPES\n// FUNCTIONS\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state\n  };\n} // Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\n\n\nfunction dehydrateQuery(query) {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash\n  };\n}\n\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\n\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === 'success';\n}\n\nexport function dehydrate(client, options = {}) {\n  const mutations = [];\n  const queries = [];\n\n  if (options.dehydrateMutations !== false) {\n    const shouldDehydrateMutation = options.shouldDehydrateMutation || defaultShouldDehydrateMutation;\n    client.getMutationCache().getAll().forEach(mutation => {\n      if (shouldDehydrateMutation(mutation)) {\n        mutations.push(dehydrateMutation(mutation));\n      }\n    });\n  }\n\n  if (options.dehydrateQueries !== false) {\n    const shouldDehydrateQuery = options.shouldDehydrateQuery || defaultShouldDehydrateQuery;\n    client.getQueryCache().getAll().forEach(query => {\n      if (shouldDehydrateQuery(query)) {\n        queries.push(dehydrateQuery(query));\n      }\n    });\n  }\n\n  return {\n    mutations,\n    queries\n  };\n}\nexport function hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return;\n  }\n\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache(); // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const mutations = dehydratedState.mutations || []; // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(dehydratedMutation => {\n    var _options$defaultOptio;\n\n    mutationCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio = options.defaultOptions) == null ? void 0 : _options$defaultOptio.mutations),\n      mutationKey: dehydratedMutation.mutationKey\n    }, dehydratedMutation.state);\n  });\n  queries.forEach(dehydratedQuery => {\n    var _options$defaultOptio2;\n\n    const query = queryCache.get(dehydratedQuery.queryHash); // Do not hydrate if an existing query exists with newer data\n\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state);\n      }\n\n      return;\n    } // Restore query\n\n\n    queryCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio2 = options.defaultOptions) == null ? void 0 : _options$defaultOptio2.queries),\n      queryKey: dehydratedQuery.queryKey,\n      queryHash: dehydratedQuery.queryHash\n    }, dehydratedQuery.state);\n  });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}