{"ast":null,"code":"import { Subscribable } from \"./subscribable.mjs\";\nimport { isServer } from \"./utils.mjs\";\nexport class FocusManager extends Subscribable {\n  constructor() {\n    super();\n    this.setup = onFocus => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus(); // Listen to visibillitychange and focus\n\n        window.addEventListener('visibilitychange', listener, false);\n        window.addEventListener('focus', listener, false);\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener);\n          window.removeEventListener('focus', listener);\n        };\n      }\n    };\n  }\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n  setEventListener(setup) {\n    var _this$cleanup2;\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(focused => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused);\n      } else {\n        this.onFocus();\n      }\n    });\n  }\n  setFocused(focused) {\n    this.focused = focused;\n    if (focused) {\n      this.onFocus();\n    }\n  }\n  onFocus() {\n    this.listeners.forEach(listener => {\n      listener();\n    });\n  }\n  isFocused() {\n    if (typeof this.focused === 'boolean') {\n      return this.focused;\n    } // document global can be unavailable in react native\n\n    if (typeof document === 'undefined') {\n      return true;\n    }\n    return [undefined, 'visible', 'prerender'].includes(document.visibilityState);\n  }\n}\nexport const focusManager = new FocusManager();","map":{"version":3,"names":["Subscribable","isServer","FocusManager","constructor","setup","onFocus","window","addEventListener","listener","removeEventListener","onSubscribe","cleanup","setEventListener","onUnsubscribe","hasListeners","_this$cleanup","call","undefined","_this$cleanup2","focused","setFocused","listeners","forEach","isFocused","document","includes","visibilityState","focusManager"],"sources":["C:/Users/chich/Project/client/node_modules/react-query/lib/core/focusManager.mjs"],"sourcesContent":["import { Subscribable } from \"./subscribable.mjs\";\nimport { isServer } from \"./utils.mjs\";\nexport class FocusManager extends Subscribable {\n  constructor() {\n    super();\n\n    this.setup = onFocus => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus(); // Listen to visibillitychange and focus\n\n\n        window.addEventListener('visibilitychange', listener, false);\n        window.addEventListener('focus', listener, false);\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener);\n          window.removeEventListener('focus', listener);\n        };\n      }\n    };\n  }\n\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n\n  setEventListener(setup) {\n    var _this$cleanup2;\n\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(focused => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused);\n      } else {\n        this.onFocus();\n      }\n    });\n  }\n\n  setFocused(focused) {\n    this.focused = focused;\n\n    if (focused) {\n      this.onFocus();\n    }\n  }\n\n  onFocus() {\n    this.listeners.forEach(listener => {\n      listener();\n    });\n  }\n\n  isFocused() {\n    if (typeof this.focused === 'boolean') {\n      return this.focused;\n    } // document global can be unavailable in react native\n\n\n    if (typeof document === 'undefined') {\n      return true;\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(document.visibilityState);\n  }\n\n}\nexport const focusManager = new FocusManager();"],"mappings":"AAAA,SAASA,YAAY,QAAQ,oBAAoB;AACjD,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAO,MAAMC,YAAY,SAASF,YAAY,CAAC;EAC7CG,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IAEP,IAAI,CAACC,KAAK,GAAGC,OAAO,IAAI;MACtB;MACA;MACA,IAAI,CAACJ,QAAQ,IAAIK,MAAM,CAACC,gBAAgB,EAAE;QACxC,MAAMC,QAAQ,GAAGA,CAAA,KAAMH,OAAO,CAAC,CAAC,CAAC,CAAC;;QAGlCC,MAAM,CAACC,gBAAgB,CAAC,kBAAkB,EAAEC,QAAQ,EAAE,KAAK,CAAC;QAC5DF,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAEC,QAAQ,EAAE,KAAK,CAAC;QACjD,OAAO,MAAM;UACX;UACAF,MAAM,CAACG,mBAAmB,CAAC,kBAAkB,EAAED,QAAQ,CAAC;UACxDF,MAAM,CAACG,mBAAmB,CAAC,OAAO,EAAED,QAAQ,CAAC;QAC/C,CAAC;MACH;IACF,CAAC;EACH;EAEAE,WAAWA,CAAA,EAAG;IACZ,IAAI,CAAC,IAAI,CAACC,OAAO,EAAE;MACjB,IAAI,CAACC,gBAAgB,CAAC,IAAI,CAACR,KAAK,CAAC;IACnC;EACF;EAEAS,aAAaA,CAAA,EAAG;IACd,IAAI,CAAC,IAAI,CAACC,YAAY,CAAC,CAAC,EAAE;MACxB,IAAIC,aAAa;MAEjB,CAACA,aAAa,GAAG,IAAI,CAACJ,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGI,aAAa,CAACC,IAAI,CAAC,IAAI,CAAC;MAC1E,IAAI,CAACL,OAAO,GAAGM,SAAS;IAC1B;EACF;EAEAL,gBAAgBA,CAACR,KAAK,EAAE;IACtB,IAAIc,cAAc;IAElB,IAAI,CAACd,KAAK,GAAGA,KAAK;IAClB,CAACc,cAAc,GAAG,IAAI,CAACP,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGO,cAAc,CAACF,IAAI,CAAC,IAAI,CAAC;IAC5E,IAAI,CAACL,OAAO,GAAGP,KAAK,CAACe,OAAO,IAAI;MAC9B,IAAI,OAAOA,OAAO,KAAK,SAAS,EAAE;QAChC,IAAI,CAACC,UAAU,CAACD,OAAO,CAAC;MAC1B,CAAC,MAAM;QACL,IAAI,CAACd,OAAO,CAAC,CAAC;MAChB;IACF,CAAC,CAAC;EACJ;EAEAe,UAAUA,CAACD,OAAO,EAAE;IAClB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAEtB,IAAIA,OAAO,EAAE;MACX,IAAI,CAACd,OAAO,CAAC,CAAC;IAChB;EACF;EAEAA,OAAOA,CAAA,EAAG;IACR,IAAI,CAACgB,SAAS,CAACC,OAAO,CAACd,QAAQ,IAAI;MACjCA,QAAQ,CAAC,CAAC;IACZ,CAAC,CAAC;EACJ;EAEAe,SAASA,CAAA,EAAG;IACV,IAAI,OAAO,IAAI,CAACJ,OAAO,KAAK,SAAS,EAAE;MACrC,OAAO,IAAI,CAACA,OAAO;IACrB,CAAC,CAAC;;IAGF,IAAI,OAAOK,QAAQ,KAAK,WAAW,EAAE;MACnC,OAAO,IAAI;IACb;IAEA,OAAO,CAACP,SAAS,EAAE,SAAS,EAAE,WAAW,CAAC,CAACQ,QAAQ,CAACD,QAAQ,CAACE,eAAe,CAAC;EAC/E;AAEF;AACA,OAAO,MAAMC,YAAY,GAAG,IAAIzB,YAAY,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}