{"ast":null,"code":"import { scheduleMicrotask } from \"./utils.mjs\"; // TYPES\n\nexport function createNotifyManager() {\n  let queue = [];\n  let transactions = 0;\n  let notifyFn = callback => {\n    callback();\n  };\n  let batchNotifyFn = callback => {\n    callback();\n  };\n  const batch = callback => {\n    let result;\n    transactions++;\n    try {\n      result = callback();\n    } finally {\n      transactions--;\n      if (!transactions) {\n        flush();\n      }\n    }\n    return result;\n  };\n  const schedule = callback => {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback);\n      });\n    }\n  };\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n\n  const batchCalls = callback => {\n    return (...args) => {\n      schedule(() => {\n        callback(...args);\n      });\n    };\n  };\n  const flush = () => {\n    const originalQueue = queue;\n    queue = [];\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n\n  const setNotifyFunction = fn => {\n    notifyFn = fn;\n  };\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n\n  const setBatchNotifyFunction = fn => {\n    batchNotifyFn = fn;\n  };\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction\n  };\n} // SINGLETON\n\nexport const notifyManager = createNotifyManager();","map":{"version":3,"names":["scheduleMicrotask","createNotifyManager","queue","transactions","notifyFn","callback","batchNotifyFn","batch","result","flush","schedule","push","batchCalls","args","originalQueue","length","forEach","setNotifyFunction","fn","setBatchNotifyFunction","notifyManager"],"sources":["C:/Users/chich/Project/client/node_modules/react-query/lib/core/notifyManager.mjs"],"sourcesContent":["import { scheduleMicrotask } from \"./utils.mjs\"; // TYPES\n\nexport function createNotifyManager() {\n  let queue = [];\n  let transactions = 0;\n\n  let notifyFn = callback => {\n    callback();\n  };\n\n  let batchNotifyFn = callback => {\n    callback();\n  };\n\n  const batch = callback => {\n    let result;\n    transactions++;\n\n    try {\n      result = callback();\n    } finally {\n      transactions--;\n\n      if (!transactions) {\n        flush();\n      }\n    }\n\n    return result;\n  };\n\n  const schedule = callback => {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback);\n      });\n    }\n  };\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n\n\n  const batchCalls = callback => {\n    return (...args) => {\n      schedule(() => {\n        callback(...args);\n      });\n    };\n  };\n\n  const flush = () => {\n    const originalQueue = queue;\n    queue = [];\n\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n\n\n  const setNotifyFunction = fn => {\n    notifyFn = fn;\n  };\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n\n\n  const setBatchNotifyFunction = fn => {\n    batchNotifyFn = fn;\n  };\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction\n  };\n} // SINGLETON\n\nexport const notifyManager = createNotifyManager();"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,aAAa,CAAC,CAAC;;AAEjD,OAAO,SAASC,mBAAmBA,CAAA,EAAG;EACpC,IAAIC,KAAK,GAAG,EAAE;EACd,IAAIC,YAAY,GAAG,CAAC;EAEpB,IAAIC,QAAQ,GAAGC,QAAQ,IAAI;IACzBA,QAAQ,CAAC,CAAC;EACZ,CAAC;EAED,IAAIC,aAAa,GAAGD,QAAQ,IAAI;IAC9BA,QAAQ,CAAC,CAAC;EACZ,CAAC;EAED,MAAME,KAAK,GAAGF,QAAQ,IAAI;IACxB,IAAIG,MAAM;IACVL,YAAY,EAAE;IAEd,IAAI;MACFK,MAAM,GAAGH,QAAQ,CAAC,CAAC;IACrB,CAAC,SAAS;MACRF,YAAY,EAAE;MAEd,IAAI,CAACA,YAAY,EAAE;QACjBM,KAAK,CAAC,CAAC;MACT;IACF;IAEA,OAAOD,MAAM;EACf,CAAC;EAED,MAAME,QAAQ,GAAGL,QAAQ,IAAI;IAC3B,IAAIF,YAAY,EAAE;MAChBD,KAAK,CAACS,IAAI,CAACN,QAAQ,CAAC;IACtB,CAAC,MAAM;MACLL,iBAAiB,CAAC,MAAM;QACtBI,QAAQ,CAACC,QAAQ,CAAC;MACpB,CAAC,CAAC;IACJ;EACF,CAAC;EACD;AACF;AACA;;EAGE,MAAMO,UAAU,GAAGP,QAAQ,IAAI;IAC7B,OAAO,CAAC,GAAGQ,IAAI,KAAK;MAClBH,QAAQ,CAAC,MAAM;QACbL,QAAQ,CAAC,GAAGQ,IAAI,CAAC;MACnB,CAAC,CAAC;IACJ,CAAC;EACH,CAAC;EAED,MAAMJ,KAAK,GAAGA,CAAA,KAAM;IAClB,MAAMK,aAAa,GAAGZ,KAAK;IAC3BA,KAAK,GAAG,EAAE;IAEV,IAAIY,aAAa,CAACC,MAAM,EAAE;MACxBf,iBAAiB,CAAC,MAAM;QACtBM,aAAa,CAAC,MAAM;UAClBQ,aAAa,CAACE,OAAO,CAACX,QAAQ,IAAI;YAChCD,QAAQ,CAACC,QAAQ,CAAC;UACpB,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF,CAAC;EACD;AACF;AACA;AACA;;EAGE,MAAMY,iBAAiB,GAAGC,EAAE,IAAI;IAC9Bd,QAAQ,GAAGc,EAAE;EACf,CAAC;EACD;AACF;AACA;AACA;;EAGE,MAAMC,sBAAsB,GAAGD,EAAE,IAAI;IACnCZ,aAAa,GAAGY,EAAE;EACpB,CAAC;EAED,OAAO;IACLX,KAAK;IACLK,UAAU;IACVF,QAAQ;IACRO,iBAAiB;IACjBE;EACF,CAAC;AACH,CAAC,CAAC;;AAEF,OAAO,MAAMC,aAAa,GAAGnB,mBAAmB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}