{"ast":null,"code":"export function infiniteQueryBehavior() {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;\n        const refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;\n        const fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;\n        const pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;\n        const isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'forward';\n        const isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'backward';\n        const oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];\n        const oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];\n        let newPageParams = oldPageParams;\n        let cancelled = false;\n        const addSignalProperty = object => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              var _context$signal;\n              if ((_context$signal = context.signal) != null && _context$signal.aborted) {\n                cancelled = true;\n              } else {\n                var _context$signal2;\n                (_context$signal2 = context.signal) == null ? void 0 : _context$signal2.addEventListener('abort', () => {\n                  cancelled = true;\n                });\n              }\n              return context.signal;\n            }\n          });\n        }; // Get query function\n\n        const queryFn = context.options.queryFn || (() => Promise.reject('Missing queryFn'));\n        const buildNewPages = (pages, param, page, previous) => {\n          newPageParams = previous ? [param, ...newPageParams] : [...newPageParams, param];\n          return previous ? [page, ...pages] : [...pages, page];\n        }; // Create function to fetch a page\n\n        const fetchPage = (pages, manual, param, previous) => {\n          if (cancelled) {\n            return Promise.reject('Cancelled');\n          }\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages);\n          }\n          const queryFnContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            meta: context.meta\n          };\n          addSignalProperty(queryFnContext);\n          const queryFnResult = queryFn(queryFnContext);\n          const promise = Promise.resolve(queryFnResult).then(page => buildNewPages(pages, param, page, previous));\n          return promise;\n        };\n        let promise; // Fetch first page?\n\n        if (!oldPages.length) {\n          promise = fetchPage([]);\n        } // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined';\n          const param = manual ? pageParam : getNextPageParam(context.options, oldPages);\n          promise = fetchPage(oldPages, manual, param);\n        } // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined';\n          const param = manual ? pageParam : getPreviousPageParam(context.options, oldPages);\n          promise = fetchPage(oldPages, manual, param, true);\n        } // Refetch pages\n        else {\n          newPageParams = [];\n          const manual = typeof context.options.getNextPageParam === 'undefined';\n          const shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true; // Fetch first page\n\n          promise = shouldFetchFirstPage ? fetchPage([], manual, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0])); // Fetch remaining pages\n\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const shouldFetchNextPage = refetchPage && oldPages[i] ? refetchPage(oldPages[i], i, oldPages) : true;\n              if (shouldFetchNextPage) {\n                const param = manual ? oldPageParams[i] : getNextPageParam(context.options, pages);\n                return fetchPage(pages, manual, param);\n              }\n              return Promise.resolve(buildNewPages(pages, oldPageParams[i], oldPages[i]));\n            });\n          }\n        }\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams\n        }));\n        return finalPromise;\n      };\n    }\n  };\n}\nexport function getNextPageParam(options, pages) {\n  return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);\n}\nexport function getPreviousPageParam(options, pages) {\n  return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);\n}\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\n\nexport function hasNextPage(options, pages) {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages);\n    return typeof nextPageParam !== 'undefined' && nextPageParam !== null && nextPageParam !== false;\n  }\n}\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\n\nexport function hasPreviousPage(options, pages) {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages);\n    return typeof previousPageParam !== 'undefined' && previousPageParam !== null && previousPageParam !== false;\n  }\n}","map":{"version":3,"names":["infiniteQueryBehavior","onFetch","context","fetchFn","_context$fetchOptions","_context$fetchOptions2","_context$fetchOptions3","_context$fetchOptions4","_context$state$data","_context$state$data2","refetchPage","fetchOptions","meta","fetchMore","pageParam","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","state","data","pages","oldPageParams","pageParams","newPageParams","cancelled","addSignalProperty","object","Object","defineProperty","enumerable","get","_context$signal","signal","aborted","_context$signal2","addEventListener","queryFn","options","Promise","reject","buildNewPages","param","page","previous","fetchPage","manual","length","resolve","queryFnContext","queryKey","queryFnResult","promise","then","getNextPageParam","getPreviousPageParam","shouldFetchFirstPage","i","shouldFetchNextPage","finalPromise","hasNextPage","Array","isArray","nextPageParam","hasPreviousPage","previousPageParam"],"sources":["C:/Users/chich/Project/client/node_modules/react-query/lib/core/infiniteQueryBehavior.mjs"],"sourcesContent":["export function infiniteQueryBehavior() {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;\n\n        const refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;\n        const fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;\n        const pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;\n        const isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'forward';\n        const isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'backward';\n        const oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];\n        const oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];\n        let newPageParams = oldPageParams;\n        let cancelled = false;\n\n        const addSignalProperty = object => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              var _context$signal;\n\n              if ((_context$signal = context.signal) != null && _context$signal.aborted) {\n                cancelled = true;\n              } else {\n                var _context$signal2;\n\n                (_context$signal2 = context.signal) == null ? void 0 : _context$signal2.addEventListener('abort', () => {\n                  cancelled = true;\n                });\n              }\n\n              return context.signal;\n            }\n          });\n        }; // Get query function\n\n\n        const queryFn = context.options.queryFn || (() => Promise.reject('Missing queryFn'));\n\n        const buildNewPages = (pages, param, page, previous) => {\n          newPageParams = previous ? [param, ...newPageParams] : [...newPageParams, param];\n          return previous ? [page, ...pages] : [...pages, page];\n        }; // Create function to fetch a page\n\n\n        const fetchPage = (pages, manual, param, previous) => {\n          if (cancelled) {\n            return Promise.reject('Cancelled');\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages);\n          }\n\n          const queryFnContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            meta: context.meta\n          };\n          addSignalProperty(queryFnContext);\n          const queryFnResult = queryFn(queryFnContext);\n          const promise = Promise.resolve(queryFnResult).then(page => buildNewPages(pages, param, page, previous));\n          return promise;\n        };\n\n        let promise; // Fetch first page?\n\n        if (!oldPages.length) {\n          promise = fetchPage([]);\n        } // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined';\n          const param = manual ? pageParam : getNextPageParam(context.options, oldPages);\n          promise = fetchPage(oldPages, manual, param);\n        } // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined';\n          const param = manual ? pageParam : getPreviousPageParam(context.options, oldPages);\n          promise = fetchPage(oldPages, manual, param, true);\n        } // Refetch pages\n        else {\n          newPageParams = [];\n          const manual = typeof context.options.getNextPageParam === 'undefined';\n          const shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true; // Fetch first page\n\n          promise = shouldFetchFirstPage ? fetchPage([], manual, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0])); // Fetch remaining pages\n\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const shouldFetchNextPage = refetchPage && oldPages[i] ? refetchPage(oldPages[i], i, oldPages) : true;\n\n              if (shouldFetchNextPage) {\n                const param = manual ? oldPageParams[i] : getNextPageParam(context.options, pages);\n                return fetchPage(pages, manual, param);\n              }\n\n              return Promise.resolve(buildNewPages(pages, oldPageParams[i], oldPages[i]));\n            });\n          }\n        }\n\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams\n        }));\n        return finalPromise;\n      };\n    }\n  };\n}\nexport function getNextPageParam(options, pages) {\n  return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);\n}\nexport function getPreviousPageParam(options, pages) {\n  return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);\n}\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\n\nexport function hasNextPage(options, pages) {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages);\n    return typeof nextPageParam !== 'undefined' && nextPageParam !== null && nextPageParam !== false;\n  }\n}\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\n\nexport function hasPreviousPage(options, pages) {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages);\n    return typeof previousPageParam !== 'undefined' && previousPageParam !== null && previousPageParam !== false;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}