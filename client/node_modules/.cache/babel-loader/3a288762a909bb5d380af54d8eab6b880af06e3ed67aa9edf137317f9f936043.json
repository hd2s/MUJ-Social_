{"ast":null,"code":"import { getDefaultState } from \"./mutation.mjs\";\nimport { notifyManager } from \"./notifyManager.mjs\";\nimport { Subscribable } from \"./subscribable.mjs\";\n// CLASS\nexport class MutationObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.setOptions(options);\n    this.bindMethods();\n    this.updateResult();\n  }\n  bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n  setOptions(options) {\n    this.options = this.client.defaultMutationOptions(options);\n  }\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      var _this$currentMutation;\n      (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.removeObserver(this);\n    }\n  }\n  onMutationUpdate(action) {\n    this.updateResult(); // Determine which callbacks to trigger\n\n    const notifyOptions = {\n      listeners: true\n    };\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true;\n    }\n    this.notify(notifyOptions);\n  }\n  getCurrentResult() {\n    return this.currentResult;\n  }\n  reset() {\n    this.currentMutation = undefined;\n    this.updateResult();\n    this.notify({\n      listeners: true\n    });\n  }\n  mutate(variables, options) {\n    this.mutateOptions = options;\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this);\n    }\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables: typeof variables !== 'undefined' ? variables : this.options.variables\n    });\n    this.currentMutation.addObserver(this);\n    return this.currentMutation.execute();\n  }\n  updateResult() {\n    const state = this.currentMutation ? this.currentMutation.state : getDefaultState();\n    const result = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset\n    };\n    this.currentResult = result;\n  }\n  notify(options) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;\n          (_this$mutateOptions$o = (_this$mutateOptions = this.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, this.currentResult.data, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o2 = (_this$mutateOptions2 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, this.currentResult.data, null, this.currentResult.variables, this.currentResult.context);\n        } else if (options.onError) {\n          var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;\n          (_this$mutateOptions$o3 = (_this$mutateOptions3 = this.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o4 = (_this$mutateOptions4 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, undefined, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n        }\n      } // Then trigger the listeners\n\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult);\n        });\n      }\n    });\n  }\n}","map":{"version":3,"names":["getDefaultState","notifyManager","Subscribable","MutationObserver","constructor","client","options","setOptions","bindMethods","updateResult","mutate","bind","reset","defaultMutationOptions","onUnsubscribe","listeners","length","_this$currentMutation","currentMutation","removeObserver","onMutationUpdate","action","notifyOptions","type","onSuccess","onError","notify","getCurrentResult","currentResult","undefined","variables","mutateOptions","getMutationCache","build","addObserver","execute","state","result","isLoading","status","isSuccess","isError","isIdle","batch","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","call","data","context","onSettled","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","error","forEach","listener"],"sources":["C:/Users/chich/Project/client/node_modules/react-query/lib/core/mutationObserver.mjs"],"sourcesContent":["import { getDefaultState } from \"./mutation.mjs\";\nimport { notifyManager } from \"./notifyManager.mjs\";\nimport { Subscribable } from \"./subscribable.mjs\";\n// CLASS\nexport class MutationObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.setOptions(options);\n    this.bindMethods();\n    this.updateResult();\n  }\n\n  bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  setOptions(options) {\n    this.options = this.client.defaultMutationOptions(options);\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      var _this$currentMutation;\n\n      (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.removeObserver(this);\n    }\n  }\n\n  onMutationUpdate(action) {\n    this.updateResult(); // Determine which callbacks to trigger\n\n    const notifyOptions = {\n      listeners: true\n    };\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true;\n    }\n\n    this.notify(notifyOptions);\n  }\n\n  getCurrentResult() {\n    return this.currentResult;\n  }\n\n  reset() {\n    this.currentMutation = undefined;\n    this.updateResult();\n    this.notify({\n      listeners: true\n    });\n  }\n\n  mutate(variables, options) {\n    this.mutateOptions = options;\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this);\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, { ...this.options,\n      variables: typeof variables !== 'undefined' ? variables : this.options.variables\n    });\n    this.currentMutation.addObserver(this);\n    return this.currentMutation.execute();\n  }\n\n  updateResult() {\n    const state = this.currentMutation ? this.currentMutation.state : getDefaultState();\n    const result = { ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset\n    };\n    this.currentResult = result;\n  }\n\n  notify(options) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;\n\n          (_this$mutateOptions$o = (_this$mutateOptions = this.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, this.currentResult.data, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o2 = (_this$mutateOptions2 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, this.currentResult.data, null, this.currentResult.variables, this.currentResult.context);\n        } else if (options.onError) {\n          var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;\n\n          (_this$mutateOptions$o3 = (_this$mutateOptions3 = this.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o4 = (_this$mutateOptions4 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, undefined, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n        }\n      } // Then trigger the listeners\n\n\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult);\n        });\n      }\n    });\n  }\n\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}